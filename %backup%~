<?php

namespace Game;
class Model_Logic_PuzzleAdvent extends Model_Logic_Puzzle
{






    /**
     * パズル開始処理 ver2
     * 宝箱の中身の抽選も最初に行うように変更
     * @param  int        $userId     ユーザID
     * @param  int        $gameId     ゲームID(イベントID)
     * @return array() データ
     * @since 2016/10/06
     */
    public static function start($userId, $gameId ,$apiAdventId=NULL, $difficulty=1 )
    {
		//var_dump((int)NULL);exit;
        $result = [];
		$useHeart =1;
		$charaMasterIdList = [];
        // game_id:0 チュートリアル
        // game_id:1 通常
        // game_id:2 イベント
		// game_id:3 降臨バトル
        // game_id:100以上 イベントID
		// game_id:10000以上 降臨バトルID
        // イベントを行っているか判定

		$userBackupEvent  = NULL;
		$userBackupAdvent = NULL;

		$isMultiFrontBattle = FALSE; //チームバトルかどうか？
        // 一時的な対応
		$tmpGameId = Model_Db_Data_Mst_Event::GAME_NORMAL;
		//パズルの種類決定
        if($gameId == Model_Db_Data_Mst_Event::GAME_EVENT){
			\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."EVENT GAMEID[$gameId]");
            //イベント取得
			$eventId = Model_Db_Sql_Mst_Event::selectNowEventId();
			$event = Model_Db_Sql_Mst_Event::select((int)$eventId);
			if (!empty($event)) {
				\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."EVENT GAMEID[$gameId]");
				$tmpGameId = Model_Db_Data_Mst_Event::GAME_EVENT;
				$gameId = $eventId;
				$isMultiFrontBattle = $event->isMultiBattle();
				//バックアップ取得
				$userBackupEvent = new Model_Db_Data_Usr_Puzzle_Backup_Event();
				$userBackupEvent->setUserId($userId);
				$userBackupEvent->setEventId($gameId);

			}
			\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."EVENT GAMEID[$gameId]");
        }else if($gameId == Model_Db_Data_Mst_Event::GAME_ADVENT){
			\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."ADVENT GAMEID[$gameId]");

			$adventIdList = Model_Logic_Advent::getActiveAdventIdList();
			//有効な降臨ボスない
			if(empty($adventIdList)) {
				//逃げ出した
				Model_Base_AppException::throwAppException(
					Model_Base_Code::ERROR_PUZZLE_ADVENT_FINISHED ,
					new \Exception("no advent is opend"),
					Model_Base_AppException::RETRY_STATUS_TITLE
				);

			}
			//adventIdがNULLでないかつ　有効な強敵IDが存在する
			if(empty($apiAdventId)){
				$adventId = $adventIdList[0];
			}elseif ( in_array($apiAdventId, $adventIdList ) ) {
				$adventId = $apiAdventId;
			}else{
				//例外
				Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE_ADVENT_FINISHED ,
					new \Exception("no advent is opend"),
					Model_Base_AppException::RETRY_STATUS_TITLE
				);

			}

			if(!Model_Logic_Advent::getPlayableTime($userId, $adventId)){
				Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE_ADVENT_OUTOFTIME ,
					new \Exception("advent[$adventId] is opend but cant play now"),
					Model_Base_AppException::RETRY_STATUS_TITLE
				);
			}else{
				//イベント取得
				\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."ADVENT GAMEID[$gameId]");
				$advent = Model_Db_Sql_Mst_Advent::select($adventId);
				$tmpGameId = Model_Db_Data_Mst_Event::GAME_ADVENT;
				$gameId = $adventId;

				$isMultiFrontBattle = $advent->isMultiBattle();
				//バックアップ作成
				$userBackupAdvent = new Model_Db_Data_Usr_Puzzle_Backup_Advent();
				$userBackupAdvent->setUserId($userId);
				$userBackupAdvent->setAdventId($gameId);
				$userBackupAdvent->setDifficulty($difficulty);
			}

			\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."ADVENT GAMEID[$gameId]");
		}else if($gameId==Model_Db_Data_Mst_Event::GAME_TUTORIAL){
			\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."TUTORIAL GAMEID[$gameId]");
			$tmpGameId = Model_Db_Data_Mst_Event::GAME_TUTORIAL;
			$useHeart = 0;
		}else{
			\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."NORMAL GAMEID[$gameId]");
			$tmpGameId = Model_Db_Data_Mst_Event::GAME_NORMAL;
		}



        $result['game_id'] = (int)$gameId;

		//バックアップデータ作成
		$userBackup = new Model_Db_Data_Usr_Puzzle_Backup();
		$userBackup->setUserId($userId);
		$userBackup->setGameId($tmpGameId); //パズルの種類
		$userBackup->setEventId($gameId); //ゲームの種類
		$userBackup->setStatus(0);
		$userBackup->setContinueHash('');
		$userBackup->setContinueCount(0);
		//$userBackupEventNew = 0;


        try {
            \Db::startUserTransaction(Model_Db_Tool::getByUId($userId));

            // ユーザー情報取得
			//ユーザーインフォ
			$info = Model_Db_Sql_Usr_Info::select($userId,TRUE);

			$userBackup->setLevel($info->getLevel());
			//バックアップ
			//$userBackup->setEventId($gameId);
			$userBackup->setCoin($info->getCoin() );
			$userBackup->setDiamond($info->getDiamond() );
			$userBackup->setFreeDiamond($info->getFreeDiamond() );
			$userBackup->setExp($info->getExp() );
			$userBackup->setHeart($info->getHeart() );
			$userBackup->setExtHeart($info->getExtHeart() );
            // スコアボーナス
            $result['user']['score_bonus'] = (int)Model_Db_Sql_Mst_Exp_Player::selectColumn($info->getLevel(), 'score_bonus');
            // ユーザーセット情報取得
            $userCharacterSet = Model_Db_Sql_Usr_Character_Set::select($userId);

			//キャラ情報を取得
			$charaList = ['front'];
			if(!empty($userCharacterSet->getSupportCharaId()))$charaList[] = 'support';
			if ( $isMultiFrontBattle ) {
				if(!empty($userCharacterSet->getBottomCharaId()))$charaList[] = 'bottom';
				if(in_array('bottom',$charaList) && !empty($userCharacterSet->getTopCharaId())  )$charaList[] = 'top';
			}

			$charaSetArray = $userCharacterSet->toArray();
			$resultArray =[];

			foreach($charaList as $key ) {
				$data = self::getCharaDataForApi($userId, $charaSetArray[$key.'_chara_id'], $gameId);
				$resultArray[$key.'_chara_id'] = $data->getId();
				$resultArray[$key.'_exp'] = $data->getCharaExp();
				$resultArray[$key.'_level'] = $data->getCharaLv();
				$result['chara'][$key] = $data;
				$charaMasterIdList[] = $data;

			}

			$userBackup->fromArray($resultArray);

			$advent = NULL;
			//バックアップの有無で処理を実行するか
			if (!empty($userBackupAdvent)) {
				//降臨ボス
				//$difficulty = 1;
				\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."ADVENT GAMEID[$gameId]");
				$bossMaster = Model_Db_Sql_Mst_Advent_Clear_Target::select($gameId , $difficulty );
				list($useHeart ,$_none)   = self::getNeedHeartNumByLevel($info->getLevel(), (int)$bossMaster->getHeart() );
				$enemyId    = $bossMaster->getEnemyId();
				$targetType = $bossMaster->getTargetType();

				//特効を取得して変更していく
				$detail = [];
				if(!empty($bossMaster->getTarget1())) {
					$detail[]   = [
						'condition'=>$bossMaster->getTarget1(),
						'targetAmount'=>$bossMaster->getTargetValue1()];
				}
				if(!empty($bossMaster->getTarget2())) {
					$detail[]   = [
						'condition'=>$bossMaster->getTarget2(),
						'targetAmount'=>$bossMaster->getTargetValue2()];
				}
				if(!empty($bossMaster->getTarget3())) {
					$detail[]   = [
						'condition'=>$bossMaster->getTarget3(),
						'targetAmount'=>$bossMaster->getTargetValue3()];
				}

				//var_dump($charaMasterIdList);exit;
				//$adventPassive = 13;




				$specialSkillFunction = NULL;

				$special    = [0,0,0,0,0,0];

				$enemySkillId = $bossMaster->getEnemySkillId();
				if (!empty($enemySkillId)) {
					$increasedBlockNum = self::getEnemySkillChargeup($userId, $enemySkillId ,$result['chara'] ,$bossMaster->getAdventId() );
					if(!empty($increasedBlockNum))$result['charge_up'] = $increasedBlockNum;
					$timeLoss = self::getEnemySkillLimitTimeLoss($userId, $enemySkillId ,$result['chara'] ,$bossMaster->getAdventId() );
					if(!empty($timeLoss))$result['time_loss'] = $timeLoss;

				}
				//ロジック変更後は削除予定
				//いずれ削除 oldAdventSkillId

				//こちら側を利用します
				//本番申請後反映
				$targetAttrList = [
					0=>0,
					1=>1,
					2=>2,
					3=>3,
					4=>4,
					5=>5,
				];

				$specialCheckFunction = function($attr ,$charaAttr) use($targetAttrList){
					if (isset($targetAttrList[$attr]) )  return $targetAttrList[$attr];
					return $charaAttr;
				};

				foreach ($charaMasterIdList as $chara ) {

					$charaId = $chara->getId();
					$charaMaster = Model_Db_Sql_Mst_Character::select($charaId ) ;
                    //スキル取得
					$adventSkill = self::getSpecialSkill($adventId , $charaId ,TRUE ) ;


					if(empty($adventSkill)) continue;


					if(!$adventSkill->isAdventPassive()) continue;
					//type=1 がブロック破壊数アップ
					//99が自分のブロックアップ
					if ($adventSkill->isTypeAdventBlockRate() ) {
						//現状自分のブロックのみ対応
						$special[
							$specialCheckFunction(
								$adventSkill->getCategory(),
								$charaMaster->getAttribution()
							)
						]  += $adventSkill->getPower($chara->getSkillLv());

						\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."ADVENTSKILLL".print_r($special,TRUE));
					}

				}


				$diamond  = Model_Db_Sql_Mst_Server_Config::selectValueByName('PUZZULE_CONTINUE_DIAMOND');
				$plusTime = Model_Db_Sql_Mst_Server_Config::selectValueByName('PUZZULE_CONTINUE_TIME');
				$paymentId = Model_Logic_Payment::getContinuePaymentId($diamond, 10);//)$plusTime);
				if (empty($paymentId) ) {
					//該当する商品がない
					Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_DB ,
						new \Exception("NO PaymentId diamond[$diamond] plustime[$plusTime]"),
						Model_Base_AppException::RETRY_STATUS_CANCEL
					);
				}


				//アプリに返す情報
				$advent =[];
				$advent['type']    = $targetType;
				$advent['special'] = $special;
				$advent['detail']  = $detail;
				$advent['special'] = $special;
				$advent['continueInfo'] =['diamond'=>(int)$diamond,'time'=>(int)$plusTime];
				//$advent['retry'] =['diamond'=>(int)$diamond,'time'=>(int)$plusTime];
				$enemy = [Model_Db_Sql_Mst_Enemy::select($enemyId)];

				//var_dump($charaMaster);exit;

			}else if (!empty($userBackupEvent)) {
				\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."EVENT GAMEID[$gameId]");
				if(Model_Db_Sql_Mst_Event::select($gameId)->getType() == Model_Db_Data_Mst_Event::TYPE_CHEST){
					// 箱の種類の抽選
					\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."EVENT GAMEID[$gameId]");
					$chests = self::lottoChest();
					foreach($chests as $chest){
						//var_dump(\Util::toArray($chest));exit;
						// 箱の中身の抽選
						self::getChest($chest);
						$result['chest'][] = \Util::toArray($chest);
					}
				}
				$eventScore = Model_Db_Sql_Cmn_Event::select($gameId, $userId, TRUE);
				if(!empty($eventScore)){
					\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."EVENT GAMEID[$gameId]");
					$userBackupEvent->setTotalScore($eventScore->getTotalScore());
					//$userBackupEvent->setHighScore($eventScore->getTotalScore());
					$userBackupEvent->setPoint($eventScore->getPoint());
					$userBackupEvent->setTotalPoint($eventScore->getTotalPoint());
				}
				\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."EVENT GAMEID[$gameId]");
				$scheduleId = NULL;
				//メソッド存在チェック
				$schedule = Model_Logic_Event::getEnableEventRankingSchedule($gameId);

				$userBackupEvent->setScheduleId(99);
				$userBackupEvent->setScheduledTotalScore(0);
				$userBackupEvent->setScheduledTotalPoint(0);
				//\Log::error(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."".print_r($schedule,TRUE));

				//スケジュールが有効かどうか
				if(!empty($schedule)){
					\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."EVENT GAMEID[$gameId]");
					$scheduleId = $schedule->getScheduleId();
					$eventScore = NULL;
					$eventScore = Model_Db_Sql_Cmn_Event_Score::select($gameId, $scheduleId,$userId, TRUE);
					$userBackupEvent->setScheduleId($scheduleId);
					if(!empty($eventScore)){
						$userBackupEvent->setScheduledTotalScore($eventScore->getTotalScore());
						$userBackupEvent->setScheduledTotalPoint($eventScore->getTotalPoint());
					}else{
						$userBackupEvent->setScheduledTotalScore(0);
						$userBackupEvent->setScheduledTotalPoint(0);

					}
				}
				$enemy = self::lottoEnemy($userId, $gameId); // 本番用(1)
			}else{
				\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."NORMAL GAMEID[$gameId]");
				$enemy = self::lottoEnemy($userId, $gameId); // 本番用(1)
			}
            $i = 0;
            foreach($enemy as $obj){
                $data = new Model_Data_Api_Puzzle_Enemy();
                $data->setRow(\Util::toArray($obj));
                $result['enemy'][$i++] = $data;
            }

			// ハート残量チェック
			//使用ハート数が1以上でチェック
			if ($useHeart>0){
				\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."HEART[$useHeart]");
				if( Model_Logic_User::getHeartAll($userId) < $useHeart){
					Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE_STAMINA ,
						new \Exception("Heart is not enough"),
						Model_Base_AppException::RETRY_STATUS_CANCEL
					);
				}

				// ハート消費処理 (チュートリアルでは消費しない)
                $heartResult = Model_Logic_User::recoveryHeart($userId, -1*$useHeart);
				$bHeart = $heartResult['heart'];
				$bExtHeart = $heartResult['ext_heart'];
				$userBackup->setHeart($bHeart  );
				$userBackup->setExtHeart($bExtHeart );

			}

            // パズルログ書き込み
            $puzzleHistory = new Model_Db_Data_Usr_Puzzle_History();
            $puzzleHistory->setUserId($userId);
            $puzzleHistory->setEventId($gameId);
            $puzzleHistory->setEnemy1Id($result['enemy'][0]->getId());
            $puzzleHistory->setEnemy2Id(!empty($result['enemy'][1]) ? $result['enemy'][1]->getId() : null);
            $puzzleHistory->setEnemy3Id(!empty($result['enemy'][2]) ? $result['enemy'][2]->getId() : null);
            $puzzleHistory->setFrontCharaId($userCharacterSet->getFrontCharaId());
            $puzzleHistory->setSupportCharaId($userCharacterSet->getSupportCharaId());
            list($resultId,$_none) = Model_Db_Sql_Usr_Puzzle_History::insert($puzzleHistory);
			//var_dump($resultId);exit;

			$userBackup->setHash($resultId);
			$userBackup->setEventId($gameId);
			self::insertUpdate($userBackup);
			//バックアップ
			if ( !empty($userBackupEvent) ){
				\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."EVENT GAMEID[$gameId]");
				$userBackupEvent->setHash($resultId);
				$userBackupEvent->setEventId($gameId);
				self::insertUpdate($userBackupEvent);
			}
			if ( !empty($userBackupAdvent) ){
				Model_Logic_Advent::createUserWithNoTransaction($userId, $gameId);
				\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."ADVENT GAMEID[$gameId]");
				$userBackupAdvent->setHash($resultId);
				$userBackupAdvent->setAdventId($gameId);
				self::insertUpdate($userBackupAdvent);

			}
			//\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."");
        } catch (\Exception $e) {

			//\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."");
			\Db::rollback();
            throw $e;
        }
		//\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."");
		if(isset($advent))$result['advent'] = $advent;
		//\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."");
        return $result;
    }









	protected static function getResultChest($chest) {

		$resultChest = ['point'=>0, 'coin'=>0, 'heart'=>0, 'diamond'=>0];
		// 宝箱処理
		if(!empty($chest)){
			foreach($chest as $d){
				if(!isset($d['obj_kind'])){
					continue;
				}
				switch($d['obj_kind']){
					case Model_Data_Object::KIND_EVENT_POINT:
						$resultChest['point'] += $d['obj_value'];
						break;
					case Model_Data_Object::KIND_COIN:
						$resultChest['coin'] += $d['obj_value'];
						break;
					case Model_Data_Object::KIND_HEART:
						$resultChest['heart'] += $d['obj_value'];
						break;
					case Model_Data_Object::KIND_DIAMOND:
						$resultChest['diamond'] += $d['obj_value'];
						break;
				}
			}
		}
		return $resultChest;

	}




	/**
     * パズル終了処理
     * @param int    $userId       ユーザID
     * @param array  $piece        通常コマ:[0]RED,[1]WHITE,[2]YELLOW,[3]BLUE,[4]GREEN,[5]PURPLE
     * @param array  $special      特殊コマ:[0]COIN[RWYBGP],[1]TIME[..],[2]EXP[..],[3]SCORE[..]
     * @param int    $client_score        得点(照合用)
     * @param int    $combo        コンボ数
     * @param int    $skill        スキル回数
     * @param array  $chest        宝箱データ
     * @return array() データ
     * @author kura
     * @since 2016/09/02
     */

    public static function finish($userId, $client_score, $client_coin, $combo, $skill, $chest, $piece, $special,$adventStatus=0)
    {
		$score = [];
        $result = [];
        $coin = 0;
        $eventPoint = 0;
		$scoreUp = 0;
        $coinUp = 0;
        $expUp = 0;
		$enemyHpDown = 0;
		$continueCount = 0;
		$difficulty    = 0; //難易度
		$adventGift    = NULL;
		$adventMissionData = []; //降臨ボス用ミッション
		//ランキング登録ルール
		//パーティーバトルのとき
		//デイリーと全国は除外

        //コンティニューしたとき
		//ウィークリーと全国は除外


		//コンティニュー時のチェックしない範囲


		$isMultiFrontBattle = FALSE; //チームバトルかどうか？
	    // 宝箱
        $resultChest = ['point'=>0, 'coin'=>0, 'heart'=>0, 'diamond'=>0];
        $scoreMax = Model_Db_Sql_Mst_Server_Config::selectValueByName('SCORE_MAX');

		$frontCharaList=[];//['front','top','bottom'];
		$supportCharaList=[];//['support'];

		$preUser     = [
			'exp'=>0,
			'lv'=>1 ,
			'exp_after'=>0,
			'lv_after'=>1 ,
			'lvup'=>FALSE,
			'heart_after'=>0,
			'heart'=>0,
			'coin'=>0,
			'coin_after'=>0,
			'point'=>0,
			'high_score'=>0,
			'high_score_after'=>0,
			'is_user_score_new'=>FALSE,

		];
		$preCharas['front']    = self::createPuzzleCharacter($userId);
		$preCharas['top']      = self::createPuzzleCharacter($userId);
		$preCharas['bottom']   = self::createPuzzleCharacter($userId);
		$preCharas['support']  = self::createPuzzleCharacter($userId);

		//スコア関連
		$eventArray = [
			'is_new'=>TRUE,
			'id'=>0,
			'is_rewrite'=>FALSE,
			'high_score'=>0,
			'total_score',
			'total_point'=>0,
			'point'=>0,
			'high_score_after'=>0,
			'total_score_after',
			'total_point_after'=>0,
			'point_after'=>0,
			'record'=>NULL
		];
		$preEvent = [];
		$targetEventList = []; //スコアのみ
		$targetPointEventList = []; //poinntイベントも

		$targetAdventList = []; //強敵「降臨ボス」

		$targetAllEventList = []; //全て
		$allEventList = ['event','event_score','daily','weekly','standing','advent'];

		foreach ($allEventList as $key ) {
			$preEvent[$key] = $eventArray;
		}

		$enemyIdList =[];

        try
		{
			\Db::startUserTransaction(Model_Db_Tool::getByUId($userId));
			$resultChest = self::getResultChest($chest);
            // ユーザー情報取得
			$info = Model_Db_Sql_Usr_Info::select($userId,true);
			//ユーザーバックアップ取得
			$userBackup      //= //Model_Service_Singleton_Usr_Puzzle_Backup::getInstance($userId,TRUE);
				=Model_Db_Sql_Usr_Puzzle_Backup::select($userId, TRUE);



			//現在のアクティブパズルデータ取得
			$history = Model_Db_Sql_Usr_Puzzle_History::selectLastHistory($userId);
			if(empty($history)){
				//データが無かった時の処理
				Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_DB , new \Exception("userid:{$userId} not exist usr_puzzle_history"));
			}

			if (empty($userBackup)) {
				//データが無かった時の処理
				Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_DB ,
					new \Exception("userid:{$userId} not exist usr_puzzle_backup")
					,Model_Base_AppException::RETRY_STATUS_TITLE
				);
			}


			//イベント処理前


			//イベントデータ取得
			$tmpGameId = $userBackup->getGameId();
			$eventId   = $userBackup->getEventId();
			$continueCount = $userBackup->getContinueCount();

			$userBackupAdvent = NULL;
			$userBackupEvent = NULL;

            // イベントID(100未満の場合イベントではない)
			//$eventId = $history->getEventId();
			if ($tmpGameId == Model_Db_Data_Mst_Event::GAME_ADVENT){
				$userBackupAdvent = Model_Db_Sql_Usr_Puzzle_Backup_Advent::select($userId, TRUE);
				if (!empty($userBackupAdvent)) {
					$hash      = $userBackup->getHash();
					$adventHash = $userBackupAdvent->getHash(); //現在 puzzleh
					if ($hash != $adventHash) {
						//違う場合はNULL
						$userBackupAdvent = NULL;
					}
				}

			}else if($eventId >= 100){
				$userBackupEvent = Model_Db_Sql_Usr_Puzzle_Backup_Event::select($userId, TRUE);
				if (!empty($userBackupEvent)) {
					$hash      = $userBackup->getHash();
					$eventHash = $userBackupEvent->getHash(); //現在 puzzleh
					if ($hash != $eventHash) {
						//違う場合はNULL
						$userBackupEvent = NULL;
					}
				}
			}

			if(!empty($userBackupAdvent)){
				//難易度
				$eventName = 'advent';
				$difficulty = $userBackupAdvent->getDifficulty();
				$isNew=FALSE;
				// (3)イベントスコア情報取得
				$eventScore = Model_Db_Sql_Usr_Puzzle_Advent::select($userId,$eventId, TRUE);
				if(empty($eventScore)){
					//グループID
					Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE,
						new \Exception('user_id['.$userId.'] cant play puzzle with no advent record.')
					);

				}
				$advent = Model_Db_Sql_Mst_Advent::select((int)$eventId);

				if (!empty($advent)) $isMultiFrontBattle = $advent->isMultiBattle();

				//if (!empty($event)) $isMultiFrontBattle = $event->isMultiBattle();

				$preEvent[$eventName]['is_new'] = $isNew;
				$preEvent[$eventName]['id']     = $eventId;
				$preEvent[$eventName]['high_score']  = $eventScore->getHighScore();
				//$preEvent[$eventName]['total_score'] = $eventScore->getTotalScore();
				$preEvent[$eventName]['record']        = $eventScore;
				$targetAdventList[] = $eventName;
				//$targetAllEventList[] = $eventName;

				//オマケ
				if ($adventStatus >0 && $userBackup->isStatusPlay()) {
					$adventGift = Model_Logic_Advent::getClearObject($eventId, $difficulty);
					if (!is_null($adventGift)) {
						Model_Logic_Advent::addPresent($userId,$adventGift[0],$adventGift[1],$adventGift[2]);
					}
				}

				//ミッションの結果
				$adventMissionData['win_status']     = $adventStatus;
				$adventMissionData['difficulty']     = $userBackupAdvent->getDifficulty();
				$adventMissionData['continue_count'] = $userBackup->getContinueCount();
				//var_dump($adventMissionData);exit;
			}
			if(!empty($userBackupEvent)){
                //($eventId >= 100){
				$isNew=FALSE;
				// (3)イベントスコア情報取得
				$eventScore = Model_Db_Sql_Cmn_Event::select($eventId, $userId, TRUE);
				if(empty($eventScore)){
					$isNew=TRUE;
					$eventScore = new Model_Db_Data_Cmn_Event();
					$eventScore->setEventId($eventId);
					$eventScore->setUserId($userId);
					$eventScore->setTotalPoint(0);
					$eventScore->setPoint(0);
					$eventScore->setTotalScore(0);
					$eventScore->setHighScore(0);
					$eventScore->setPlayCount(0);
					$eventScore->setFlagExchPoint(0);
					//$preEvent['event']['is_new'] = TRUE;
				}
				$preEvent['event']['is_new'] = $isNew;
				$preEvent['event']['id'] = $eventId;
				$preEvent['event']['total_point'] = $userBackupEvent->getTotalPoint();
				$preEvent['event']['point']       = $userBackupEvent->getPoint();
				$preEvent['event']['high_score']  = $eventScore->getHighScore();
				$preEvent['event']['total_score'] = $userBackupEvent->getTotalScore();
				$preEvent['event']['record']        = $eventScore;
				$targetPointEventList[] = 'event';
				$targetAllEventList[] = 'event';
				//イベント取得
				$event = Model_Db_Sql_Mst_Event::select((int)$eventId);
				if (!empty($event)) $isMultiFrontBattle = $event->isMultiBattle();
				$scheduleId = NULL;
				//メソッド存在チェック
				$schedule = Model_Logic_Event::getEnableEventRankingSchedule($eventId);
				//スケジュールが有効かどうか
				if(!empty($schedule)) $scheduleId = $schedule->getScheduleId();

				if (!is_null($scheduleId)) {
					$isNew=FALSE;
					$eventScore = Model_Db_Sql_Cmn_Event_Score::select($eventId, $scheduleId,$userId, TRUE);

					$scheduledTotalPoint = $userBackupEvent->getScheduledTotalPoint();;
					//$scheduledHighScore  = 0;
					$scheduledTotalScore = $userBackupEvent->getScheduledTotalScore();;

                    //切り替えチェック
					if (   $eventId    !=$userBackupEvent->getEventId()
						|| $scheduleId !=$userBackupEvent->getScheduleId()
					){
						$scheduledTotalPoint = 0;
						//$scheduledHighScore  = 0;
						$scheduledTotalScore = 0;
					}



					if(empty($eventScore)){
						$eventScore = new Model_Db_Data_Cmn_Event_Score();
						$eventScore->setEventId($eventId);
						$eventScore->setScheduleId($scheduleId);
						$eventScore->setUserId($userId);
						$eventScore->setTotalPoint(0);
						$eventScore->setTotalScore(0);
						$eventScore->setHighScore(0);
						$eventScore->setPlayCount(0);
						$isNew =TRUE;
					}
					$preEvent['event_score']['is_new'] = $isNew;
					$preEvent['event_score']['id'] = $eventId;
					$preEvent['event_score']['total_point'] = $scheduledTotalPoint;//$userBackupEvent->getScheduledTotalPoint();
					$preEvent['event_score']['high_score']  = $eventScore->getHighScore();
					$preEvent['event_score']['total_score'] = $scheduledTotalScore;
					$preEvent['event_score']['record']        = $eventScore;
					$targetPointEventList[] = 'event_score';
					$targetAllEventList[] = 'event_score';
				}


			}
			//ノーコンティニューのときのみランキング記録
			if ($continueCount==0) {
				$isNew =FALSE;
				$eventName = 'weekly';
				$weekId = self::getYearAndWeekNumber();
				$eventScore = Model_Db_Sql_Cmn_Score_Weekly::select($weekId,$userId);
				if(empty($eventScore)){
					$eventScore = new Model_Db_Data_Cmn_Score_Weekly();
					$eventScore->setWeekId($weekId);
					$eventScore->setUserId($userId);
					$eventScore->setTotalScore(0);
					$eventScore->setHighScore(0);
					$eventScore->setRankingState(0);
					//$preEvent['event']['is_new'] = TRUE;
					$isNew =TRUE;
				}

				$preEvent[$eventName]['is_new'] = $isNew;
				$preEvent[$eventName]['id']     = $weekId;
				$preEvent[$eventName]['high_score']  = $eventScore->getHighScore();
				$preEvent[$eventName]['total_score'] = $eventScore->getTotalScore();
				$preEvent[$eventName]['record']        = $eventScore;
				$targetEventList[] = $eventName;
				$targetAllEventList[] = $eventName;

			}
			if (!$isMultiFrontBattle) {
				//マルチバトルのときは何もしない
				$dayId = date("Ymd");
				$isNew =FALSE;
				$eventScore = Model_Db_Sql_Cmn_Score_Daily::select($dayId,$userId);
				if(empty($eventScore)){
					$eventScore = new Model_Db_Data_Cmn_Score_Daily();
					$eventScore->setDayId($dayId);
					$eventScore->setUserId($userId);
					$eventScore->setTotalScore(0);
					$eventScore->setHighScore(0);
					$isNew =TRUE;
					//$preEvent['event']['is_new'] = TRUE;
				}
				$eventName = 'daily';
				$preEvent[$eventName]['is_new'] = $isNew;
				$preEvent[$eventName]['id']     = $dayId;
				$preEvent[$eventName]['high_score']  = $eventScore->getHighScore();
				$preEvent[$eventName]['total_score'] = $eventScore->getTotalScore();
				$preEvent[$eventName]['record']        = $eventScore;
				$targetEventList[] = $eventName;
				$targetAllEventList[] = $eventName;

				if ($continueCount==0) {
					$isNew =FALSE;
					//$weekId = self::getYearAndWeekNumber();
					$eventScore = Model_Db_Sql_Cmn_Score_Standing::select($userId);
					if(empty($eventScore)){
						$eventScore = new Model_Db_Data_Cmn_Score_Standing();
						$eventScore->setUserId($userId);
						$eventScore->setTotalScore(0);
						$eventScore->setHighScore(0);
						//$preEvent['event']['is_new'] = TRUE;
						$isNew =TRUE;
					}
					$eventName = 'standing';
					$preEvent[$eventName]['is_new'] = $isNew;
					$preEvent[$eventName]['id']     = 1;
					$preEvent[$eventName]['high_score']  = $eventScore->getHighScore();
					$preEvent[$eventName]['total_score'] = $eventScore->getTotalScore();
					$preEvent[$eventName]['record']        = $eventScore;
					$targetEventList[] = $eventName;
					$targetAllEventList[] = $eventName;
				}
			}



			// (1)ユーザーパズルスコア情報取得
			$isUserScoreNew=FALSE;

			if (!$isMultiFrontBattle)$userScore = Model_Db_Sql_Usr_Puzzle_Score::select($userId);
			if ( $isMultiFrontBattle)$userScore = Model_Db_Sql_Usr_Puzzle_Score_Multi::select($userId);
			if(empty($userScore)){
				if (!$isMultiFrontBattle)$userScore = new Model_Db_Data_Usr_Puzzle_Score();
				if ( $isMultiFrontBattle)$userScore = new Model_Db_Data_Usr_Puzzle_Score_Multi();
				$userScore->setHighScore(0);
				$isUserScoreNew=TRUE;
				$userScore->setUserId($userId);
			}


			//処理前
			$preUser['is_user_score_new']   = $isUserScoreNew;
			$preUser['lv']   = $userBackup->getLevel();
			$preUser['exp']  = $userBackup->getExp();
			$preUser['heart']= $userBackup->getHeart();
			$preUser['coin'] = $userBackup->getCoin();
			$preUser['high_score'] = $userScore->getHighScore();

			$keyName='front';
			$preCharas[$keyName] = self::createPuzzleCharacter($userId,
				$userBackup->getFrontCharaId(),
				$userBackup->getFrontLevel(),
				$userBackup->getFrontExp()
				,$eventId
			);

			$frontCharaList[] = $keyName;

			$keyName='top';
			if ($isMultiFrontBattle && !empty($userBackup->getTopCharaId())) {
				$preCharas[$keyName] = self::createPuzzleCharacter($userId,
					$userBackup->getTopCharaId(),
					$userBackup->getTopLevel(),
					$userBackup->getTopExp()
					,$eventId
				);
				$frontCharaList[] = $keyName;
			}
			$keyName='bottom';
			if ($isMultiFrontBattle && !empty($userBackup->getBottomCharaId())) {
				$preCharas[$keyName] = self::createPuzzleCharacter($userId,
					$userBackup->getBottomCharaId(),
					$userBackup->getBottomLevel(),
					$userBackup->getBottomExp()
					,$eventId
				);
				$frontCharaList[] = $keyName;
			}
			$keyName='support';
			if ( !empty($userBackup->getSupportCharaId())) {
				$preCharas[$keyName] = self::createPuzzleCharacter($userId,
					$userBackup->getSupportCharaId(),
					$userBackup->getSupportLevel(),
					$userBackup->getSupportExp()
					,$eventId
				);

				$supportCharaList[] = $keyName;
			}

			//全キャラ
			$charaList = [];

			foreach ( $frontCharaList as $key ) {
				$charaList[] = $key;
			}
			foreach ( $supportCharaList as $key ) {
				$charaList[] = $key;
			}

			//$charaList=['front','top'];
			//var_dump($charaList);exit;

			//経験値
			foreach ( $charaList as $key ) {

				$charaExp = $piece[$preCharas[$key]['master_attribution']];
				for($i = 0; $i < 4; $i++){
					$charaExp += $special[$i][$preCharas[$key]['master_attribution']];
				}
				$preCharas[$key]['exp_after'] = $charaExp + $preCharas[$key]['exp'];
			}

			// 獲得経験値処理（LvUP処理）
			// 経験値フロント

			// フロントキャラの最大レベル・最大経験値を取得

			foreach ( $charaList as $key ) {

				$charaMaxLv  = Model_Db_Sql_Mst_Character::select($preCharas[$key]['id'])->getMaxLevel();
				$charaMaxExp = Model_Db_Sql_Mst_Exp_Front::select($charaMaxLv)->getExp();
				$preCharas[$key]['exp_after']   = min($preCharas[$key]['exp_after'], $charaMaxExp);
				$data = Model_Db_Sql_Mst_Exp_Front::slelectLevel($preCharas[$key]['exp_after']);
				$preCharas[$key]['lv_after'] = $preCharas[$key]['lv'];
				$preCharas[$key]['evolution_after'] = $preCharas[$key]['evolution'] ;
				if( $data['lv'] > $preCharas[$key]['lv_after'] ){
					$preCharas[$key]['lv_after'] = $data['lv'];
					$preCharas[$key]['lvup'] = TRUE;
					if(in_array($key,$frontCharaList) && $preCharas[$key]['lv_after'] == $charaMaxLv) {
						$preCharas[$key]['evolution_after'] = 1;
					}
				}
			}

			//敵
			$cnt=1;
			if (!empty($history->getEnemy1Id())) $enemyIdList[$cnt++] = $history->getEnemy1Id();
			if (!empty($history->getEnemy2Id())) $enemyIdList[$cnt++] = $history->getEnemy2Id();
			if (!empty($history->getEnemy3Id())) $enemyIdList[$cnt++] = $history->getEnemy3Id();

			//score2の計算

			// 1:消去したブロックベース
			$score[1] = 100 * array_sum($piece) * 1000;
			$score[2] = 0;
			$score[3] = 0;
            // 3:スコアブロック
			foreach ( $charaList as $key ) {
				$characterScoreBonus  = $preCharas[$key]['master']->getScoreBonus();
				$score[2] += $preCharas[$key]['lv'] * $characterScoreBonus * $piece[$preCharas[$key]['master_attribution']];
			}

			foreach($special[3] as $key=>$val){
				$bonus = 0;
				foreach ( $charaList as $key2 ) {
					if ($key == $preCharas[$key2]['master_attribution'] ) {
						$characterScoreBonus  = $preCharas[$key2]['master']->getScoreBonus();
						$bonus += $preCharas[$key2]['lv'] * $characterScoreBonus;
					}
				}
				$score[3] += (100 + $bonus) * $val * 2 * 1000;
			}


			// 合計スコア（小計）
			$totalScore = array_sum($score);
			$baseScore = $totalScore;
			//var_dump($score);exit;
			// 4:コンボボーナス加算
			$totalScore *= min(($combo * 0.003) + 1, 1.4);

			$winStatus = 1;
			//とりあえず一人分
			foreach ( $supportCharaList as $key ) {
				$skillLv  = $preCharas[$key]['record']->getSkillLevel();

				$skillId  = $preCharas[$key]['skill_id'];
				list($tmpScoreUp , $tmpCoinUp, $tmpExpUp,$tmpEnemyHpDown) = self::getPassiveEffects($skillId, $skillLv);
				$scoreUp   +=$tmpScoreUp;
				$coinUp    +=$tmpCoinUp;
				$expUp     +=$tmpExpUp;
				$enemyHpDown +=$tmpEnemyHpDown;
			}

			$totalScore += $totalScore*$scoreUp/100;
			// 6:プレイヤースコアボーナス
			// スコアボーナス

			$userScoreBonusRate = Model_Db_Sql_Mst_Exp_Player::selectColumn($info->getLevel(), 'score_bonus');
			$userScoreBonus = 0;
			if($userScoreBonusRate){
				$userScoreBonus = $totalScore;
				$totalScore *= ($userScoreBonusRate / 1000);
				$userScoreBonus = intval(($totalScore - $userScoreBonus) / 1000);
			}
            // サーバ上での計算：合計スコア（最終）
			$server_score = intval($totalScore / 1000);
			// 最終的にはクライアントスコアを採用
			$totalScore = $client_score;
			//スコア確定
			if(!empty($userScoreBonusRate)){
				$userScoreBonus = intval($totalScore * ( ($userScoreBonusRate - 1000)/$userScoreBonusRate ));
				//$totalScore *= ($userScoreBonusRate / 1000);
				//$userScoreBonus = intval(($totalScore - $userScoreBonus) / 1000);
			}

			//スコア確定
			//$arrayUserScore = \Util::toArray($userScore);
			//var_dump($arrayUserScore);exit;
			// (2)週間スコア情報取得

			//敵
			$adventTotalScore = 0;
			if ($tmpGameId==Model_Db_Data_Mst_Event::GAME_ADVENT){
				list($coin, $eventPoint, $winStatus, $adventTotalScore) = self::checkWinByScoreForAdvent($totalScore, $enemyIdList,  $adventStatus);
				//var_dump($coin);exit;
				//ポイントを入れ替え
				$totalScore = $adventTotalScore;
			}else{

				$adventTotalScore = $totalScore;
				list($coin, $eventPoint, $winStatus) = self::checkWinByScore($totalScore, $enemyIdList, $enemyHpDown);
			}

			\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."winstatus[$winStatus]");



            // 2:通常ブロックでもらえるコイン
			$coin += array_sum($piece) * 0.4;
			// 3:コインブロックでもらえるコイン
			$coin += array_sum($special[0]) * 2;
			// 4:パッシブ
			if($coinUp){
				$coin += $coin * $coinUp / 100;
			}
			// サーバ上での計算：合計コイン（最終）
			$server_coin = intval($coin);
			// 最終的にはクライアントコインを採用
			$coin = $client_coin;

			//$eventPoint +=

			//イベントポイント特効
			$eventPointRate = 0;
			$eventPointAdd  = 0;
			foreach ( $charaList as $key ) {
				$eventPointRate += $preCharas[$key]['event_point_rate'];
			}

			//ユーザーがゲットしたイベントポイント
			//$preUser['point']  = $eventPoint + $resultChest['point'];
			$eventPointAdd      = (int)($eventPoint*($eventPointRate/10000));
			$eventPointAddChest = (int)($resultChest['point']*($eventPointRate/10000));
			$eventPoint +=$eventPointAdd;
			$resultChest['point'] +=$eventPointAddChest;
			$preUser['point'] +=$eventPoint;
			$preUser['point'] +=$resultChest['point'];
			// プレイヤー経験値

			$preUser['coin_after'] = 	$preUser['coin'] + $coin + $resultChest['coin'];

            // 1 経験値ブロック
			$playerExp = array_sum($special[2]) * 10;
			// 2 獲得スコア
			$playerExp += intval($totalScore / 100);
			// 3 パッシブ
			if($expUp){
				$playerExp += intval($playerExp * $expUp / 100);
			}


			\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."exp:".$playerExp);


			$preUser['exp_after'] = min( $playerExp + $preUser['exp']  ,Model_Db_Sql_Mst_Exp_Player::selectMaxExp() );
			$data = Model_Db_Sql_Mst_Exp_Player::slelectLevel($preUser['exp_after']);

			if($data['lv'] > $preUser['lv']){
				$preUser['lv_after']    = $data['lv'];
				$preUser['heart_after'] = Model_Db_Sql_Mst_Server_Config::selectValueByName('USER_MAX_HEART');
				$preUser['lvup'] = TRUE;
			}else{
				$preUser['lv_after'] = $preUser['lv'];
			}

			//キャラ
			foreach ( $charaList as $key ) {

				$charas = $preCharas[$key]['record'];
				$charas->setLevel($preCharas[$key]['lv_after']);
				$charas->setExp($preCharas[$key]['exp_after']);
				if($preCharas[$key]['evolution_after']!=$preCharas[$key]['evolution']){
					$charas->setEvolution($preCharas[$key]['evolution_after']);
				}
				Model_Db_Sql_Usr_Character_List::update($charas);
			}
			// ユーザー
			$info->setLevel($preUser['lv_after']);
			$info->setExp($preUser['exp_after'] );
			$info->setCoin($preUser['coin_after'] );
			Model_Db_Sql_Usr_Info::update($info);
			if($preUser['lvup']){
				// 強引にハートを5に
				Model_Db_Sql_Usr_Info::updateHeart($userId,5);

			}

			// (1)ユーザースコア情報
			if(empty($userScore->getScoreJson())){
				//$arrayUserScore['score_json'] = '['.$totalScore.']';
				$userScore->setScoreJson('['.$totalScore.']');
			}else{
				$array = json_decode($userScore->getScoreJson());
				if (count($array) > 4){
					//$tmp =
					array_shift($array);
				}
				array_push($array,$totalScore);
				$userScore->setScoreJson( json_encode($array) ) ;
			}
			//var_dump($userScore);exit;
			$userScore->setUserId($userId);
			$preUser['high_score_after'] = $preUser['high_score'];
			if($preUser['high_score'] <= $totalScore){
				$preUser['high_score_after'] = $totalScore;
				$userScore->setHighScore($preUser['high_score_after']);
				$userScore->setFrontCharaId($preCharas['front']['id']);
				$userScore->setFrontEvolution($preCharas['front']['evolution']);
				$userScore->setSupportCharaId($preCharas['support']['id']);
				$userScore->setSupportEvolution($preCharas['support']['evolution']);
				if ($isMultiFrontBattle) {
					$userScore->setTopCharaId($preCharas['top']['id']);
					$userScore->setTopEvolution($preCharas['top']['evolution']);
					$userScore->setBottomCharaId($preCharas['bottom']['id']);
					$userScore->setBottomEvolution($preCharas['bottom']['evolution']);

				}
			}
			//$userScore->setScoreJson($arrayUserScore['score_json']);

        	self::insertUpdate($userScore  ) ;


			//スコアの更新

			$limitedScore = min($totalScore , Model_Db_Sql_Mst_Server_Config::selectValueByName('EVENT_HIGH_SCORE_LIMIT') ) ;
			foreach ($targetEventList as $key ) {
				$preEvent[$key]['high_score_after']  = $preEvent[$key]['high_score'];
				$preEvent[$key]['total_score_after'] = $preEvent[$key]['total_score'];
				if ($preEvent[$key]['high_score']<=$totalScore) {
					$preEvent[$key]['high_score_after']  = $totalScore;

					$preEvent[$key]['record']->setHighScore($preEvent[$key]['high_score_after']);
					$preEvent[$key]['record']->setFrontCharaId(    $preCharas['front']['id']);
					$preEvent[$key]['record']->setFrontCharaLv(    $preCharas['front']['lv']);
					$preEvent[$key]['record']->setFrontEvolution(  $preCharas['front']['evolution']);
					$preEvent[$key]['record']->setSupportCharaId(  $preCharas['support']['id']);
					$preEvent[$key]['record']->setSupportCharaLv(  $preCharas['support']['lv']);
					$preEvent[$key]['record']->setSupportEvolution($preCharas['support']['evolution']);
				}
				$preEvent[$key]['total_score_after'] = $preEvent[$key]['total_score'] + $totalScore;
				//通常更新
				$preEvent[$key]['record']->setTotalScore($preEvent[$key]['total_score_after']);
				$preEvent[$key]['record']->setName($info->getName());
				self::insertUpdate( $preEvent[$key]['record'] );
			}

			//イベントスコア
			foreach ($targetPointEventList as $key ) {
				$preEvent[$key]['high_score_after']  = $preEvent[$key]['high_score'];
				$preEvent[$key]['total_score_after'] = $preEvent[$key]['total_score'];
				$preEvent[$key]['total_point_after'] = $preEvent[$key]['total_point'] +  $preUser['point'];
				$preEvent[$key]['point_after']       = $preEvent[$key]['point']       +  $preUser['point'];
				if ($preEvent[$key]['high_score']<=$totalScore) {
					$preEvent[$key]['high_score_after']  = $limitedScore;
					$preEvent[$key]['record']->setHighScore($preEvent[$key]['high_score_after']);
					$preEvent[$key]['record']->setFrontCharaId(    $preCharas['front']['id']);
					$preEvent[$key]['record']->setFrontCharaLv(    $preCharas['front']['lv']);
					$preEvent[$key]['record']->setFrontEvolution(  $preCharas['front']['evolution']);
					$preEvent[$key]['record']->setSupportCharaId(  $preCharas['support']['id']);
					$preEvent[$key]['record']->setSupportCharaLv(  $preCharas['support']['lv']);
					$preEvent[$key]['record']->setSupportEvolution($preCharas['support']['evolution']);
				}
				$preEvent[$key]['total_score_after'] = $preEvent[$key]['total_score'] + $limitedScore;
				//通常更新
				$preEvent[$key]['record']->setTotalScore($preEvent[$key]['total_score_after']);
				$preEvent[$key]['record']->setTotalPoint($preEvent[$key]['total_point_after']);
				$preEvent[$key]['record']->setName($info->getName());
				if ($key == 'event') {
					$preEvent[$key]['record']->setPoint($preEvent[$key]['point_after']);
					//累計ポイント //チェックしてミッション達成報酬と同時に受け取る
					\Game\Model_Logic_Event::checkUserAachievementRewardPoint(
						$userId,
						$preEvent[$key]['record']->getEventId(),
						Model_Logic_Event::getArchivementPoint($preEvent[$key]['record'])
					);
				}
				self::insertUpdate( $preEvent[$key]['record']  );

			}

			//

			foreach ($targetAdventList as $key ) {
				$preEvent[$key]['high_score_after']  = $preEvent[$key]['high_score'];
				if ($preEvent[$key]['high_score']<=$totalScore) {
					$preEvent[$key]['high_score_after']  = $totalScore;

					$preEvent[$key]['record']->setHighScore($preEvent[$key]['high_score_after']);
					$preEvent[$key]['record']->setFrontCharaId(    $preCharas['front']['id']);
					//$preEvent[$key]['record']->setFrontCharaLv(    $preCharas['front']['lv']);
					$preEvent[$key]['record']->setFrontEvolution(  $preCharas['front']['evolution']);
					$preEvent[$key]['record']->setSupportCharaId(  $preCharas['support']['id']);
					//$preEvent[$key]['record']->setSupportCharaLv(  $preCharas['support']['lv']);
					$preEvent[$key]['record']->setSupportEvolution($preCharas['support']['evolution']);
				}
				//$preEvent[$key]['total_score_after'] = $preEvent[$key]['total_score'] + $totalScore;
				//通常更新
				//$preEvent[$key]['record']->setTotalScore($preEvent[$key]['total_score_after']);
				//$preEvent[$key]['record']->setName($info->getName());
				self::insertUpdate( $preEvent[$key]['record'] );
			}




			if ($userBackup->isStatusPlay()) {
				// 宝箱処理ハート
				if($resultChest['heart']){
					// ハートをプレゼントBOXへ送付
					Model_Logic_Present::addHeart(
						Model_Data_Present::TYPE_SYSTEM,
						Model_Db_Sql_Mst_Server_Config::selectValueByName('SYSTEM_USER_ID'),
						$userId, $resultChest['heart'], Model_Db_Data_Mst_Comment::ID_HEART_FROM_CHEST);
				}
				// 宝箱処理ダイヤ
				if($resultChest['diamond']){
					//var_dump($resultChest['diamond']);exit;
					Model_Logic_Accounting::addCoin($userId, 0, $resultChest['diamond'], 0);
				}

				if($eventId != Model_Db_Data_Mst_Event::GAME_TUTORIAL){
					// ミッション処理
					Model_Logic_Mission::updateMisisonStatus($userId,
						[
							'score' => $totalScore,
							'coin'  => $preUser['coin_after']-$preUser['coin'],
							'combo' => $combo,
							'skill' => $skill,
							'user_level' => $preUser['lv_after'],
							'play'  => 1
						],
						Model_Db_Sql_Mst_Character::selectColumn($preCharas['front']['id'], Model_Db_Base_Data_Mst_Character::CONTROL_ID)
						,$eventId
					);

					//降臨ボス用のミッション
					if  (!empty($adventMissionData)) Model_Logic_Mission::updateAdventMissionStatus($userId,$eventId,$adventMissionData);
					//var_dump($adventMissionData);exit;

					Model_Logic_Training::checkMission(
						$userId,['lvup'=>[$preUser['lv_after'] ,$preUser['lv']] ]
					);

				}
			}
			//とりあえず終了済み
			$userBackup->setStatus(1);
			Model_Db_Sql_Usr_Puzzle_Backup::update($userBackup);

			// 履歴
			$history->setClientScore($client_score);
			$history->setServerScore($server_score);
			$history->setBonusScore($userScoreBonus);
			$history->setCoin($preUser['coin_after']-$preUser['coin']);
			$history->setPoint($preUser['point']);
			$history->setUserExp($preUser['exp_after']-$preUser['exp']);
			$history->setFrontExp($preCharas['front']['exp_after'] - $preCharas['front']['exp']);
			if(empty($preCharas['support']['id'])){
				$history->setSupportExp($preUser['exp_after'] - $preUser['exp']);
			}
			Model_Db_Sql_Usr_Puzzle_History::update($history);


			// 操作ログ
			$ah = Model_Logic_ActionHistory::getInstance('puzzle_finish', $userId);
			$ah->history_id = $history->getId();
			$ah->fc_id      = $preCharas['front']['id'];
			$ah->fc_attri   = $preCharas['front']['master_attribution'];
			$ah->fc_lv      = $preCharas['front']['lv'];
			$ah->fc_sb      = $preCharas['front']['master']->getScoreBonus();
			$ah->sc_id      = $preCharas['support']['id'];
			$ah->sc_attri   = $preCharas['support']['master_attribution'];
			$ah->sc_lv      = $preCharas['support']['lv'];
			$ah->sc_sb      = (isset($preCharas['support']['master']))?$preCharas['support']['master']->getScoreBonus():0;
			$ah->sc_skill   = (isset($preCharas['support']['skill_id']))?$preCharas['support']['skill_id']:0;
			$ah->sc_scoreup = $scoreUp;
			$ah->sc_coinup  = $coinUp;
			$ah->sc_expup   = $expUp;
			$ah->usr_lv     = $preUser['lv'];
			$ah->score1     = intval($score[1]/1000);
			$ah->score2     = intval($score[2]/1000);
			$ah->score3     = intval($score[3]/1000);
			$ah->basescore  = intval($baseScore/1000);
			$ah->usr_bonus_rate = $userScoreBonusRate;
			$ah->usr_bonus  = $userScoreBonus;
			$ah->event_chara = 0;//設定待ち
			$ah->piece      = $piece;
			$ah->special    = $special;
			$ah->server_score  = $server_score;
			$ah->client_score  = $client_score;
			$ah->combo  = $combo;
			$ah->skill  = $skill;
			$ah->chest  = $chest;


			//降臨ボスログ
			if (!empty($userBackupAdvent) ) {

				$adventHistory = new Model_Db_Data_Usr_Puzzle_Advent_History();
				$adventHistory->setHistoryId($userBackupAdvent->getHash());
				$adventHistory->setAdventId($userBackupAdvent->getAdventId());
				$adventHistory->setDifficulty($userBackupAdvent->getDifficulty());
				$adventHistory->setUserId($userBackup->getUserId());
				$adventHistory->setLevel($userBackup->getLevel());
				$adventHistory->setFlagClear($adventStatus);
				$adventHistory->setContinueCount($userBackup->getContinueCount());
				$adventHistory->setScore($totalScore);
				$adventHistory->setCombo($combo);
				$adventHistory->setSkill($skill);
				$adventPlayTime  = \Util_Date::getTime()  - \Util_Date::getTimeFromStr($history->getInsertDate());
				$adventHistory->setPlayTime( abs($adventPlayTime) );

				if (!empty($adventGift)){
					list($_kind,$_id,$_value ,$giftId,$orderId) = $adventGift;
					$adventHistory->setGiftId($giftId);
					$adventHistory->setOrderId($orderId);
				}


				//見方キャラ
				//経験値
				$paramsNumbers=[];
				foreach ( $charaList as $key ) {
					$paramsNumbers[$key.'_chara_id'   ] = $preCharas[$key]['id'];
					$paramsNumbers[$key.'_level'      ] = $preCharas[$key]['lv'];
					$paramsNumbers[$key.'_skill_level'] = $preCharas[$key]['record']->getSkillLevel();
				}
				//ブロック
				foreach($piece as $key =>$blockNum) {
					$col = 'piece_'.(($key>5)?101:$key);
					$paramsNumbers[$col] = $blockNum;
				}
				$adventHistory->fromArray($paramsNumbers);
				Model_Db_Sql_Usr_Puzzle_Advent_History::insert($adventHistory);
			}



			// 結果
			$result['userInfo'] = \Util::toArray($info);
			$result['score'] = min($totalScore, $scoreMax);
			$result['bonus_score'] = $userScoreBonus;
			$result['bonus_score_rate'] = $userScoreBonusRate ? ($userScoreBonusRate - 1000) / 10 : 0;
			$result['high_score'] = min($preUser['high_score_after'] , $scoreMax);
			$result['high_score_renew'] = (int)($preUser['high_score_after'] > $preUser['high_score'] );
			$result['coin'] = $coin;
			$result['point'] = $eventPoint ;
			$result['point_add'] = (int)($eventPointAdd + $eventPointAddChest);
			$result['point_rate']= (int)100*($eventPointRate/10000);

			$result['chara']['front'] = null;
			$result['chara']['support'] = null;
			//キャラ情報
			foreach ($charaList as $key ) {
				$result['chara'][$key] = [
					'id' => $preCharas[$key]['id'] ,
					'lv' => $preCharas[$key]['lv_after'] ,
					'lvUp' => (int)$preCharas[$key]['lvup'],
					'exp' => $preCharas[$key]['exp_after'] ,
					'skill_lv' => $preCharas[$key]['record']->getSkillLevel() ,//変化なし
					'skill_exp' => $preCharas[$key]['record']->getSkillExp()//変化なし
				];

			}


			$result['chest'] = $resultChest;

			//報酬
			//mokku
			if (!empty($adventGift)){
				list($kind,$id,$value ,$giftId,$orderId) = $adventGift;
				$result['advent_gift']=[
					'obj_kind'=>(int)$kind,
					'obj_id'=>(int)$id,
					'obj_value'=>(int)$value,
				];
			}

		} catch(Model_Base_AppException $e){

			\Db::rollback();
            \Log::warning($e->getMessage());
			//\Log::warning($e->getMessage());
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE,
				new \Exception('puzzle error.'),
				$e->getRetryStatus()
			);


		} catch (\Exception $e) {

			//throw $e;
			\Db::rollback();
            \Log::warning($e->getMessage());
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE,
				new \Exception('puzzle error.'),
				Model_Base_AppException::RETRY_STATUS_CANCEL
			);
        }

        return $result;
    }



	protected static function getPassiveEffects($supportSkillId ,$skillLv=1)
	{
		$result = [0,0,0,0];
		if (empty($supportSkillId)) return $result;

		$tmp = Model_Db_Sql_Mst_Skill::select($supportSkillId);
		if(empty($tmp)) return $result;

		//$supportSkill
		if($tmp->getLaunchConditions() == 2 ){
			list($scoreUp,$coinUp,$expUp,$enemyHpDown) = $result;
			if($tmp->getCategory() == 1){

				$tmpArray = $tmp->toArray();
				$column = 'lv'.$skillLv.'_power';
				switch($tmp->getType()){
					case 2:
						// スコアアップ
						$scoreUp += $tmpArray[$column];
						break;
					case 3:
						// コインアップ
						$coinUp  = $tmpArray[$column];
						break;
					case 4:
						// 経験値アップ
						$expUp   = $tmpArray[$column];
						break;
				}


			}

			if( $tmp->getCategory() == 3){
				if($tmp->getType() == 2){
					$tmpArray = $tmp->toArray();
					$column = 'lv'.$skillLv.'_power';
					\Log::info(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."hpDown");
					\Log::info(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."".$column);
                     // ターゲット弱体
					//$column      = 'lv'.$support['skill_level'].'_power';
					$enemyHpDown   = $tmpArray[$column];
					//$totalScore += $totalScore * $scoreUp / 100;
				}
			}
			return [$scoreUp,$coinUp,$expUp,$enemyHpDown];
		}

		return $result;
	}

	protected static function checkWinByScore($totalScore,$enemyIdList, $enemyHpDown=0)
	{
		// 敵情報
		$eventPoint = 0;
		$coin=0;
		$attackPoint = $totalScore; //攻撃力初期化
		$countEnemy = 0; //敵の数
		$win = 0;
		$winStatus = 1;//生き残り有り

		$countEnemy = count($enemyIdList);
		//勝敗判定
		// 1:敵を倒してもらえるコイン
		foreach($enemyIdList as $enemyId) {

			//敵情報取得
			$enemy = Model_Db_Sql_Mst_Enemy::select($enemyId);
			$enemyHp = $enemy->getHp();

			//if($enemyHpDown>0)\Log::error(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."eHP[$enemyHp] scoreDOWN[$enemyHpDown]");
			$enemyHp -= (int)($enemy->getHp()*$enemyHpDown/100) ;

            //test
			//if($enemyHpDown>0)\Log::error(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."eHP[$enemyHp] scoreDOWN[$enemyHpDown]");

			$enemyType = $enemy->getType();
			$enemyCoin = $enemy->getCoin();
			if($enemyHp > $attackPoint ) break;

			//勝ち
			if($enemyType >= 100){
				$eventPoint += $enemyCoin;
			}else{
				$coin += $enemyCoin;
			}
			$attackPoint -= $enemyHp;
			$win++;
		}

		//勝敗状態

		if($win == $countEnemy){
			$winStatus = 2;//完勝
		} else if ($win == 0){
			$winStatus = 0;//完敗
		}
		return [$coin,$eventPoint,$winStatus];
	}


	protected static function checkWinByScoreForAdvent($totalScore,$enemyIdList, $adventStatus=0)
	{
		// 敵情報
		$eventPoint = 0;
		$coin=0;
		$attackPoint = 0; //攻撃力初期化

		$winStatus = 1;//生き残り有り

		//勝敗判定
		// 1:敵を倒してもらえるコイン

		if ($adventStatus>0) {
			$winStatus = 2;//完勝
			foreach($enemyIdList as $enemyId) {

				//敵情報取得
				$enemy = Model_Db_Sql_Mst_Enemy::select($enemyId);
				$enemyHp = $enemy->getHp();
				$enemyCoin = $enemy->getCoin();
				//勝ち
				$coin += $enemyCoin;
				$attackPoint += $enemyHp;
				//var_dump($coin);exit;
			}
		}else{
			$winStatus = 0;//完敗
		}
		//return [$coin,$eventPoint,$winStatus,$attackPoint];
		return [$coin,$eventPoint,$winStatus,$totalScore];
	}




	//スコアをアップデート

	/**
     * 汎用アップデート
     * @param object    $data
	 * @return boolean 成功・失敗
     * @author koda
     * @since 2016/12/02
     */
	protected static function insertUpdate($data){

		$className    = get_class($data);
		//対応するSQLクラスを取得
		$sqlClassName = str_replace('_Db_Data_' ,'_Db_Sql_',$className);

		if(!class_exists($sqlClassName)){
			$err = "$className doesnt have sql class";
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_DB , new \Exception($err));
		}

		$method = "update";
		\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'.$sqlClassName." $method");

		if ($sqlClassName::$method($data)>0) {
			return TRUE;
		}
		//アップデート回数が0ならば
		$method = 'insert';
		$sqlClassName::$method($data);
		\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."$sqlClassName $method");
		return TRUE;

	}


	/**
     * パズル終了処理用情報取得
     * @param int    $userId       ユーザID
	 * @param int    $id           キャラID
	 * @param int    $level        レベルID
     * @param int    $exp          経験値
	 * @param int    $eventId      イベントID
     * @return array データ
     * @author koda
     * @since 2016/12/02
     */
	protected static function createPuzzleCharacter($userId,$id=0, $level=1,$exp=0,$eventId=0)
	{
		$charaArray = [
			'id'=>NULL,
			'exp'=>NULL ,//処理前
			'lv'=>NULL ,//処理前
			'lvup'=>FALSE,//レベルアップフラグ
			'exp_after'=>0,
			'lv_after'=>0,
			'evolution'=>NULL,
			'evolution_after'=>NULL,
			'master'=>null,//キャラマスター
			'record'=>null,//キャラデータ
			'master_attribution'=>NULL,
			'event_point_rate'=>0,
			'skill_id'=>0
		];

		if ($id<1) return $charaArray;


		$charaArray['lv']  = $level;
		$charaArray['exp'] = $exp;
		$charaArray['id']  = $id;


		$charaArray['master']  = Model_Db_Sql_Mst_Character::select($charaArray['id']);
		$puzzleChara = Model_Db_Sql_Usr_Character_List::selectMasterId($userId, $charaArray['id']);
		$charaArray['record']  = $puzzleChara;
		$charaArray['master_attribution']  = $puzzleChara->getMasterAttribution();
		$charaArray['evolution']  = $puzzleChara->getEvolution();
		$charaArray['skill_id']   = $charaArray['master']->getSkillId();

		//現在のイベントIDをもっているか？
		if ($eventId<=100  ||$eventId != $charaArray['master']->getEventId() ) return $charaArray;


		$eventSkill = Model_Db_Sql_Mst_Skill::select($charaArray['master']->getEventSkillId());
		if (empty($eventSkill)) return $charaArray;
		if ($eventSkill->isTypePassivePointup()) $charaArray['event_point_rate'] = 100*$eventSkill->getCharge($puzzleChara->getSkillLevel());


		\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'.print_r($charaArray['master'],true));
		\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'.print_r($charaArray['event_point_rate'],TRUE));


		//if(!empty($specialEffect))$charaArray['event_point_rate'] = $specialEffect->getEventPointRate();
		return $charaArray;

	}




	/**
     * キャラを自動的デッキに追加(複数場取る用)
     * @param int    $userId       ユーザID
     * @return Model_Data_Api_Puzzle_Character データ
     * @author koda
     * @since 2016/12/02
     */
	public static function setCharaForMultiFrontBattle($userId )
	{
		//イベントIDから取得
		$userCharacterSet   = Model_Db_Sql_Usr_Character_Set::select($userId,FALSE);
		$checkPossitionList = ['bottom','top'];
		//NULL
		$ary = $userCharacterSet->toArray();
		$notSetCount = 0;
		$excludeIdList = [(int)$userCharacterSet->getFrontCharaId() ];
		//$excludeIdList = [];
		foreach ($checkPossitionList as $key=> $val ) {
			if (empty( $ary[$val.'_chara_id'])){
				$notSetCount++;
			}else{
				$excludeIdList[] =(int) $ary[$val.'_chara_id'];
				unset($checkPossitionList[$key]); //存在しているの
			}
		}
		if ($notSetCount==0)return ; //何もしない
		//キャラリストを取得
		$charaList = Model_Db_Sql_Usr_Character_List::selectListOrderByLevel($userId,1,$notSetCount ,$excludeIdList);

		if (empty($charaList))return ;
		foreach ($checkPossitionList as $key=> $val ) {
			$chara = array_shift($charaList);
			if(empty($chara)) break;
			$ary[$val.'_chara_id'] = $chara->getMasterId();
		}

		try {
            //更新
			$userCharacterSet->fromArray($ary);
			\Db::startUserTransaction(Model_Db_Tool::getByUId($userId));
			Model_Db_Sql_Usr_Character_Set::update($userCharacterSet);
			\Db::commit();
		}catch (\Exception $e ) {
			\Db::rollback();
			throw $e;
		}
	}



	/**
     * キャラ情報取得
     * @param int    $userId       ユーザID
     * @param array  $masterId
     * @return Model_Data_Api_Puzzle_Character データ
     * @author koda
     * @since 2016/12/02
     */
	static function getCharaDataForApi($userId , $masterId ,$gameId=0 ) {

		$userChara = Model_Db_Sql_Usr_Character_List::selectMasterId($userId, $masterId);
		if(empty($userChara)){
			$err = "Not exists userid:{$userId}　master_id:".$masterId." in usr_character_list";
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_DB , new \Exception($err));
		}

		//マスター取得
		$master = Model_Db_Sql_Mst_Character::select($masterId);

		$data = new Model_Data_Api_Puzzle_Character();
		$data->setId($userChara->getMasterId());
		$data->setCharaLv($userChara->getLevel());
		$data->setCharaExp($userChara->getExp());
		$data->setSkillLv($userChara->getSkillLevel());
		$data->setSkillExp($userChara->getSkillExp());
		$data->setOverrideSkillId(0);
		$data->setSkillId($master->getSkillId());

		//いずれ削除 oldAdventSkillId
		if ( $gameId == $master->getAdventId() ) {
			$data->setOverrideSkillId($master->getAdventOverrideSkillId() );
		}
		//スペシャルIDを取得
		//本番申請後反映
		$specialSkill = self::getSpecialSkill($gameId,$userChara->getMasterId(),FALSE);
		if (!empty($specialSkill) && !$specialSkill->isPassiveGroup()) {
			$data->setOverrideSkillId($specialSkill->getId()  );
		}
		return $data;
	}



	/**
     * コンティニュー
     * @param int    $userId       ユーザID
     * @param array  $continueHash
     * @return int コンティニュー回数
     * @author koda
     * @since 2016/12/02
     */

	public static function continuePuzzle($userId, $continueHash,$continueCount=0)
	{

		\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."DEBUGGCONTINUE1 userId[$userId] hash[$continueHash] count[$continueCount]");

		//\Db::startUserTransaction(Model_Db_Tool::getByUId($userId));
		// ユーザー情報取得
		//$info = Model_Db_Sql_Usr_Info::select($userId,true);

		//$userBackupEvent = Model_Db_Sql_Usr_Puzzle_Backup_Event::select($userId, TRUE);
		//現在のアクティブパズルデータ取得
		$history    = Model_Db_Sql_Usr_Puzzle_History::selectLastHistory($userId);
		$userBackup = Model_Db_Sql_Usr_Puzzle_Backup::select($userId, TRUE);
		if(empty($history)||empty($userBackup)){
			//データが無かった時の処理
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_DB ,
				new \Exception("userid:{$userId} not exist usr_puzzle_history")
				,Model_Base_AppException::RETRY_STATUS_TITLE
			);
			//データが無かった時の処理
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_DB ,
				new \Exception("userid:{$userId} not exist usr_puzzle_backup")
				,Model_Base_AppException::RETRY_STATUS_TITLE
			);
		}


		//ゲームIDを取得
		$gameId = $userBackup->getGameId();

        if ($gameId == Model_Db_Data_Mst_Event::GAME_ADVENT) {
            // 降臨
			$adventId = $userBackup->getEventId(); //イベントIDという名前だが advent_idもかねる
			$advent = Model_Db_Sql_Mst_Advent::select($adventId);
			if (empty($advent)) {
				//からっぽであればエラーを投げる
                //データが無かった時の処理
				Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE_CONTINUE ,
					new \Exception("adventId[$adventId] is not  exist ")
					,Model_Base_AppException::RETRY_STATUS_TITLE
				);
			}
        } elseif ($gameId == Model_Db_Data_Mst_Event::GAME_EVENT) {
            // 通常イベント
            $eventId = $userBackup->getEventId();
            $event = Model_Db_Sql_Mst_Event::select($eventId);
            if (!$event->isBingoEvent()) {
                // ビンゴイベントでなければエラー
                Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE_CONTINUE ,
                    new \Exception("eventId[$eventId] continue is not support")
                    ,Model_Base_AppException::RETRY_STATUS_TITLE
                );
            }
		}else{
			//降臨バトルでなければ　コンティニューなし
			//データが無かった時の処理
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE_CONTINUE ,
				new \Exception("gameId[$gameId] cannot continue")
				,Model_Base_AppException::RETRY_STATUS_TITLE
			);
		}

		//コンティニューで使用するダイヤ
		//$diamond = 10;
		$paymentId = NULL; //コンフィグから取得
		$diamond   = Model_Db_Sql_Mst_Server_Config::selectValueByName('PUZZULE_CONTINUE_DIAMOND');
		$plusTime  = Model_Db_Sql_Mst_Server_Config::selectValueByName('PUZZULE_CONTINUE_TIME');
		$paymentId = Model_Logic_Payment::getContinuePaymentId($diamond, $plusTime);
		//IDないのでエラーで返す
		if (is_null($paymentId) ) {
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE_CONTINUE ,
				new \Exception("cannot_continue_with_diamond[$diamond]")
			);
		}

		//送られた
		if ($userBackup->getContinueCount()-$continueCount ==1) {
			//多重リクエスト対策
			\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."DEBUGGCONTINUE4 userId[$userId] ".$userBackup->getContinueCount());
			return $userBackup->getContinueCount();
		}
		if ($userBackup->getContinueCount()!=$continueCount ) {
			//エラー
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE_CONTINUE ,
				new \Exception("usrId[$userId] continueCount is wrong [$continueCount ,".$userBackup->getContinueCount()."]")
				,Model_Base_AppException::RETRY_STATUS_CANCEL
			);

		}


		//コンティニューハッシュが同じであればエラー
		if ($userBackup->getContinueHash() == $continueHash
			&& $userBackup->getContinueCount()-$continueCount >1
		) {
			//エラー
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE_CONTINUE ,
				new \Exception("usrId[$userId] continuehash is same [$continueHash ,".$userBackup->getContinueHash()."]")
				,Model_Base_AppException::RETRY_STATUS_CANCEL
			);
		}

		//コンティニューアイテム購入
		//コンティニュー情報を更新して終了
		$userBackup->setContinueHash($continueHash);

		\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."DEBUGGCONTINUE2 userId[$userId] ".$userBackup->getContinueCount());
		$userBackup->setContinueCount($continueCount+1);
		\Log::debug(__CLASS__.':'.__FUNCTION__.'['.__LINE__.']'."DEBUGGCONTINUE3 userId[$userId] ".$userBackup->getContinueCount());

		try {
			\Db::startUserTransaction(Model_Db_Tool::getByUId($userId));
			\Game\Model_Logic_Payment::coin($userId , $paymentId ) ;
			//ユーザーバックアップ更新
			self::insertUpdate($userBackup);
		} catch(Model_Base_AppException $e){

			\Db::rollback();
            \Log::warning($e->getMessage());
			//\Log::warning($e->getMessage());
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE,
				new \Exception('puzzle error.'),
				$e->getRetryStatus()
			);
		} catch (\Exception $e) {

			//throw $e;
			\Db::rollback();
            \Log::warning($e->getMessage());
			Model_Base_AppException::throwAppException(Model_Base_Code::ERROR_PUZZLE,
				new \Exception('puzzle error.'),
				Model_Base_AppException::RETRY_STATUS_CANCEL
			);
        }

		return $userBackup->getContinueCount();
	}


}
